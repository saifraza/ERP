generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

// User and Authentication (Updated for Multi-tenancy)
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  role      String   @default("USER") // SUPER_ADMIN, ADMIN, MANAGER, OPERATOR, USER
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Multi-tenancy
  defaultCompanyId String?
  companyAccess    CompanyUser[]
  
  // Relations
  farmerPayments PaymentTransaction[]
  weighbridgeEntries WeighbridgeTransaction[]
  documents Document[]
  emailCredentials EmailCredential[]
}

// Company and Factory Models (Referenced from schema-masters.prisma)
// These will be imported during build

// Farmer Management (Multi-tenant)
model Farmer {
  id             String   @id @default(uuid())
  companyId      String   // Multi-tenant field
  factoryId      String   // Factory association
  code           String   
  name           String
  village        String
  phoneNumber    String
  bankAccount    String?
  landArea       Float    // in hectares
  contractedArea Float    // in hectares
  status         String   @default("ACTIVE") // ACTIVE, INACTIVE, SUSPENDED
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  deliveries     CaneDelivery[]
  payments       PaymentTransaction[]
  contracts      Contract[]
  
  @@unique([companyId, code])
  @@index([companyId, factoryId])
}

// Cane Management
model CaneDelivery {
  id              String   @id @default(uuid())
  deliveryDate    DateTime @default(now())
  farmerId        String
  vehicleNumber   String
  grossWeight     Float
  tareWeight      Float
  netWeight       Float
  qualityGrade    String
  recoveryRate    Float
  amount          Float
  paymentStatus   String @default("PENDING") // PENDING, PROCESSING, PAID, FAILED
  weighbridgeId   String? @unique
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  farmer          Farmer   @relation(fields: [farmerId], references: [id])
  weighbridge     WeighbridgeTransaction? @relation(fields: [weighbridgeId], references: [id])
  payment         PaymentTransaction?
}

// Weighbridge
model WeighbridgeTransaction {
  id            String   @id @default(uuid())
  timestamp     DateTime @default(now())
  vehicleNumber String
  farmerCode    String?
  grossWeight   Float?
  tareWeight    Float?
  netWeight     Float?
  receiptNumber String   @unique
  status        String @default("IN_PROGRESS") // IN_PROGRESS, COMPLETED, CANCELLED
  operatorId    String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  operator      User?    @relation(fields: [operatorId], references: [id])
  delivery      CaneDelivery?
}


// Division: Sugar
model SugarProduction {
  id              String   @id @default(uuid())
  batchNumber     String   @unique
  productionDate  DateTime
  caneUsed        Float    // MT
  sugarProduced   Float    // MT
  recoveryRate    Float    // percentage
  grade           String
  molassesOutput  Float    // MT
  shift           String
  status          String @default("IN_PROGRESS") // IN_PROGRESS, COMPLETED, QUALITY_CHECK, APPROVED, REJECTED
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// Division: Power
model PowerGeneration {
  id              String   @id @default(uuid())
  timestamp       DateTime @default(now())
  totalGeneration Float    // MW
  gridExport      Float    // MW
  internalUse     Float    // MW
  bagasseUsed     Float    // MT
  steamPressure   Float    // kg/cmÂ²
  efficiency      Float    // percentage
  createdAt       DateTime @default(now())
}

// Division: Ethanol
model EthanolProduction {
  id                String   @id @default(uuid())
  batchNumber       String   @unique
  productionDate    DateTime
  molassesUsed      Float    // MT
  ethanolProduced   Float    // Liters
  fermentationTime  Int      // hours
  purity            Float    // percentage
  tankId            String
  status            String @default("IN_PROGRESS") // IN_PROGRESS, COMPLETED, QUALITY_CHECK, APPROVED, REJECTED
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

// Division: Animal Feed
model FeedProduction {
  id              String   @id @default(uuid())
  batchNumber     String   @unique
  productionDate  DateTime
  bagasseUsed     Float    // MT
  feedProduced    Float    // MT
  moistureContent Float    // percentage
  proteinContent  Float    // percentage
  productLine     String
  status          String @default("IN_PROGRESS") // IN_PROGRESS, COMPLETED, QUALITY_CHECK, APPROVED, REJECTED
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}


// Financial
model PaymentTransaction {
  id            String   @id @default(uuid())
  farmerId      String
  deliveryId    String   @unique
  amount        Float
  paymentDate   DateTime?
  paymentMethod String?
  referenceNo   String?
  status        String @default("PENDING") // PENDING, PROCESSING, PAID, FAILED
  approvedBy    String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  farmer        Farmer   @relation(fields: [farmerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  delivery      CaneDelivery @relation(fields: [deliveryId], references: [id])
  approver      User?    @relation(fields: [approvedBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

// Contracts
model Contract {
  id            String   @id @default(uuid())
  contractNo    String   @unique
  farmerId      String
  startDate     DateTime
  endDate       DateTime
  area          Float    // hectares
  estimatedYield Float   // MT
  pricePerTon   Float
  status        String @default("ACTIVE") // DRAFT, ACTIVE, EXPIRED, TERMINATED
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  farmer        Farmer   @relation(fields: [farmerId], references: [id])
}


// Equipment & Maintenance
model Equipment {
  id            String   @id @default(uuid())
  code          String   @unique
  name          String
  division      String
  type          String
  status        String @default("OPERATIONAL") // OPERATIONAL, MAINTENANCE, BREAKDOWN, RETIRED
  lastMaintenance DateTime?
  nextMaintenance DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  maintenanceLogs MaintenanceLog[]
}


model MaintenanceLog {
  id            String   @id @default(uuid())
  equipmentId   String
  maintenanceDate DateTime
  type          String
  description   String
  cost          Float?
  performedBy   String
  nextDue       DateTime?
  createdAt     DateTime @default(now())

  // Relations
  equipment     Equipment @relation(fields: [equipmentId], references: [id])
}

// Document Management
model Document {
  id            String   @id @default(uuid())
  fileName      String
  fileType      String   // pdf, excel, word, image
  fileSize      Int      // in bytes
  fileUrl       String   // storage location
  category      String   // invoice, report, purchase_order, delivery_note, quality_cert
  division      String?  // sugar, power, ethanol, feed
  content       String?  // extracted text content
  metadata      String?  // JSON with document metadata
  uploadedBy    String
  processedAt   DateTime?
  aiAnalysis    String?  // JSON with AI analysis results
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  uploader      User     @relation(fields: [uploadedBy], references: [id])
  analyses      DocumentAnalysis[]
}

model DocumentAnalysis {
  id            String   @id @default(uuid())
  documentId    String
  analysisType  String   // financial, compliance, quality, inventory
  results       String   // JSON analysis results
  insights      String   // AI generated insights
  alerts        String?  // JSON alerts/warnings
  confidence    Float    // AI confidence score
  createdAt     DateTime @default(now())

  // Relations
  document      Document @relation(fields: [documentId], references: [id])
}

// Email Integration - Multi-tenant support
model EmailCredential {
  id                    String    @id @default(uuid())
  companyId            String?
  userId               String?
  emailAddress         String    @unique
  googleRefreshToken   String?   @db.Text
  microsoftRefreshToken String?   @db.Text
  provider             String    @default("google") // google, microsoft, imap
  isActive             Boolean   @default(true)
  lastSynced           DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  // Relations
  company              Company?  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user                 User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([companyId])
  @@index([userId])
  @@map("email_credentials")
}