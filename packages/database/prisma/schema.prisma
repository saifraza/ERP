generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

// User and Authentication (Updated for Multi-tenancy)
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  role      String   @default("USER") // SUPER_ADMIN, ADMIN, MANAGER, OPERATOR, USER
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Multi-tenancy
  defaultCompanyId String?
  companyAccess    CompanyUser[]
  
  // Relations
  farmerPayments PaymentTransaction[]
  weighbridgeEntries WeighbridgeTransaction[]
  documents Document[]
  emailCredentials EmailCredential[]
}

// Temporary models - will be replaced with proper import mechanism
model Company {
  id                String   @id @default(uuid())
  name              String
  code              String   @unique
  
  // Relations
  farmers           Farmer[]
  vendors           Vendor[]
  divisions         Division[]
  purchaseRequisitions PurchaseRequisition[]
  rfqs              RFQ[]
  quotations        Quotation[]
  purchaseOrders    PurchaseOrder[]
  grns              GRN[]
  vendorInvoices    VendorInvoice[]
  users             CompanyUser[]
  emailCredentials  EmailCredential[]
}

model CompanyUser {
  id                String   @id @default(uuid())
  userId            String
  companyId         String
  
  // Relations
  user              User     @relation(fields: [userId], references: [id])
  company           Company  @relation(fields: [companyId], references: [id])
}

model Division {
  id                String   @id @default(uuid())
  companyId         String
  name              String
  code              String
  
  // Relations
  company           Company  @relation(fields: [companyId], references: [id])
  purchaseRequisitions PurchaseRequisition[]
  
  @@unique([companyId, code])
  @@index([companyId])
}

// Farmer Management (Multi-tenant)
model Farmer {
  id             String   @id @default(uuid())
  companyId      String   // Multi-tenant field
  factoryId      String   // Factory association
  code           String   
  name           String
  village        String
  phoneNumber    String
  bankAccount    String?
  landArea       Float    // in hectares
  contractedArea Float    // in hectares
  status         String   @default("ACTIVE") // ACTIVE, INACTIVE, SUSPENDED
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // Relations
  company        Company  @relation(fields: [companyId], references: [id])

  // Relations
  deliveries     CaneDelivery[]
  payments       PaymentTransaction[]
  contracts      Contract[]
  
  @@unique([companyId, code])
  @@index([companyId, factoryId])
}

// Cane Management
model CaneDelivery {
  id              String   @id @default(uuid())
  deliveryDate    DateTime @default(now())
  farmerId        String
  vehicleNumber   String
  grossWeight     Float
  tareWeight      Float
  netWeight       Float
  qualityGrade    String
  recoveryRate    Float
  amount          Float
  paymentStatus   String @default("PENDING") // PENDING, PROCESSING, PAID, FAILED
  weighbridgeId   String? @unique
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  farmer          Farmer   @relation(fields: [farmerId], references: [id])
  weighbridge     WeighbridgeTransaction? @relation(fields: [weighbridgeId], references: [id])
  payment         PaymentTransaction?
}

// Weighbridge
model WeighbridgeTransaction {
  id            String   @id @default(uuid())
  timestamp     DateTime @default(now())
  vehicleNumber String
  farmerCode    String?
  grossWeight   Float?
  tareWeight    Float?
  netWeight     Float?
  receiptNumber String   @unique
  status        String @default("IN_PROGRESS") // IN_PROGRESS, COMPLETED, CANCELLED
  operatorId    String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  operator      User?    @relation(fields: [operatorId], references: [id])
  delivery      CaneDelivery?
}


// Division: Sugar
model SugarProduction {
  id              String   @id @default(uuid())
  batchNumber     String   @unique
  productionDate  DateTime
  caneUsed        Float    // MT
  sugarProduced   Float    // MT
  recoveryRate    Float    // percentage
  grade           String
  molassesOutput  Float    // MT
  shift           String
  status          String @default("IN_PROGRESS") // IN_PROGRESS, COMPLETED, QUALITY_CHECK, APPROVED, REJECTED
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// Division: Power
model PowerGeneration {
  id              String   @id @default(uuid())
  timestamp       DateTime @default(now())
  totalGeneration Float    // MW
  gridExport      Float    // MW
  internalUse     Float    // MW
  bagasseUsed     Float    // MT
  steamPressure   Float    // kg/cmÂ²
  efficiency      Float    // percentage
  createdAt       DateTime @default(now())
}

// Division: Ethanol
model EthanolProduction {
  id                String   @id @default(uuid())
  batchNumber       String   @unique
  productionDate    DateTime
  molassesUsed      Float    // MT
  ethanolProduced   Float    // Liters
  fermentationTime  Int      // hours
  purity            Float    // percentage
  tankId            String
  status            String @default("IN_PROGRESS") // IN_PROGRESS, COMPLETED, QUALITY_CHECK, APPROVED, REJECTED
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

// Division: Animal Feed
model FeedProduction {
  id              String   @id @default(uuid())
  batchNumber     String   @unique
  productionDate  DateTime
  bagasseUsed     Float    // MT
  feedProduced    Float    // MT
  moistureContent Float    // percentage
  proteinContent  Float    // percentage
  productLine     String
  status          String @default("IN_PROGRESS") // IN_PROGRESS, COMPLETED, QUALITY_CHECK, APPROVED, REJECTED
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}


// Financial
model PaymentTransaction {
  id            String   @id @default(uuid())
  farmerId      String
  deliveryId    String   @unique
  amount        Float
  paymentDate   DateTime?
  paymentMethod String?
  referenceNo   String?
  status        String @default("PENDING") // PENDING, PROCESSING, PAID, FAILED
  approvedBy    String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  farmer        Farmer   @relation(fields: [farmerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  delivery      CaneDelivery @relation(fields: [deliveryId], references: [id])
  approver      User?    @relation(fields: [approvedBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

// Contracts
model Contract {
  id            String   @id @default(uuid())
  contractNo    String   @unique
  farmerId      String
  startDate     DateTime
  endDate       DateTime
  area          Float    // hectares
  estimatedYield Float   // MT
  pricePerTon   Float
  status        String @default("ACTIVE") // DRAFT, ACTIVE, EXPIRED, TERMINATED
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  farmer        Farmer   @relation(fields: [farmerId], references: [id])
}


// Equipment & Maintenance
model Equipment {
  id            String   @id @default(uuid())
  code          String   @unique
  name          String
  division      String
  type          String
  status        String @default("OPERATIONAL") // OPERATIONAL, MAINTENANCE, BREAKDOWN, RETIRED
  lastMaintenance DateTime?
  nextMaintenance DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  maintenanceLogs MaintenanceLog[]
}


model MaintenanceLog {
  id            String   @id @default(uuid())
  equipmentId   String
  maintenanceDate DateTime
  type          String
  description   String
  cost          Float?
  performedBy   String
  nextDue       DateTime?
  createdAt     DateTime @default(now())

  // Relations
  equipment     Equipment @relation(fields: [equipmentId], references: [id])
}

// Document Management
model Document {
  id            String   @id @default(uuid())
  fileName      String
  fileType      String   // pdf, excel, word, image
  fileSize      Int      // in bytes
  fileUrl       String   // storage location
  category      String   // invoice, report, purchase_order, delivery_note, quality_cert
  division      String?  // sugar, power, ethanol, feed
  content       String?  // extracted text content
  metadata      String?  // JSON with document metadata
  uploadedBy    String
  processedAt   DateTime?
  aiAnalysis    String?  // JSON with AI analysis results
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  uploader      User     @relation(fields: [uploadedBy], references: [id])
  analyses      DocumentAnalysis[]
}

model DocumentAnalysis {
  id            String   @id @default(uuid())
  documentId    String
  analysisType  String   // financial, compliance, quality, inventory
  results       String   // JSON analysis results
  insights      String   // AI generated insights
  alerts        String?  // JSON alerts/warnings
  confidence    Float    // AI confidence score
  createdAt     DateTime @default(now())

  // Relations
  document      Document @relation(fields: [documentId], references: [id])
}

// Email Integration - Multi-tenant support
model EmailCredential {
  id                    String    @id @default(uuid())
  companyId            String?
  userId               String?
  emailAddress         String    @unique
  googleRefreshToken   String?   @db.Text
  microsoftRefreshToken String?   @db.Text
  provider             String    @default("google") // google, microsoft, imap
  isActive             Boolean   @default(true)
  lastSynced           DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  // Relations
  company              Company?  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user                 User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([companyId])
  @@index([userId])
}

// ==================== PROCUREMENT SYSTEM ====================

// Vendor Management
model Vendor {
  id                String   @id @default(uuid())
  companyId         String
  code              String
  name              String
  type              String   // supplier, contractor, service_provider
  category          String   // chemicals, spare_parts, consumables, services
  gstNumber         String?
  panNumber         String?
  address           String
  city              String
  state             String
  pincode           String
  country           String   @default("India")
  contactPerson     String
  email             String
  phone             String
  alternatePhone    String?
  bankName          String?
  bankAccount       String?
  bankIfsc          String?
  creditLimit       Float    @default(0)
  creditDays        Int      @default(30)
  rating            Float    @default(3) // 1-5 rating
  status            String   @default("active") // active, inactive, blacklisted
  qualificationDate DateTime?
  notes             String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  company           Company  @relation(fields: [companyId], references: [id])
  quotations        Quotation[]
  purchaseOrders    PurchaseOrder[]
  invoices          VendorInvoice[]
  evaluations       VendorEvaluation[]
  
  @@unique([companyId, code])
  @@index([companyId, status])
}

// Vendor Evaluation
model VendorEvaluation {
  id                String   @id @default(uuid())
  vendorId          String
  evaluationDate    DateTime
  qualityScore      Float    // 1-5
  deliveryScore     Float    // 1-5
  priceScore        Float    // 1-5
  serviceScore      Float    // 1-5
  overallScore      Float    // Calculated average
  evaluatedBy       String
  comments          String?  @db.Text
  recommendation    String   // continue, review, terminate
  createdAt         DateTime @default(now())

  // Relations
  vendor            Vendor   @relation(fields: [vendorId], references: [id])
}

// Purchase Requisition (PR)
model PurchaseRequisition {
  id                String   @id @default(uuid())
  companyId         String
  prNumber          String
  divisionId        String
  departmentId      String?
  requestedBy       String
  requestDate       DateTime
  requiredBy        DateTime
  priority          String   @default("normal") // urgent, high, normal, low
  status            String   @default("draft") // draft, submitted, approved, rejected, converted
  approvedBy        String?
  approvalDate      DateTime?
  rejectionReason   String?
  notes             String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  company           Company  @relation(fields: [companyId], references: [id])
  division          Division @relation(fields: [divisionId], references: [id])
  items             PRItem[]
  rfqs              RFQ[]
  
  @@unique([companyId, prNumber])
  @@index([companyId, status])
}

// PR Line Items
model PRItem {
  id                String   @id @default(uuid())
  prId              String
  itemCode          String
  itemDescription   String
  quantity          Float
  unit              String
  estimatedPrice    Float?
  specifications    String?  @db.Text
  preferredVendor   String?
  justification     String?
  
  // Relations
  pr                PurchaseRequisition @relation(fields: [prId], references: [id], onDelete: Cascade)
}

// Request for Quotation (RFQ)
model RFQ {
  id                String   @id @default(uuid())
  companyId         String
  rfqNumber         String
  prId              String?
  issueDate         DateTime
  dueDate           DateTime
  status            String   @default("draft") // draft, sent, closed, cancelled
  terms             String?  @db.Text
  createdBy         String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  company           Company  @relation(fields: [companyId], references: [id])
  pr                PurchaseRequisition? @relation(fields: [prId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  vendors           RFQVendor[]
  items             RFQItem[]
  quotations        Quotation[]
  
  @@unique([companyId, rfqNumber])
  @@index([companyId, status])
}

// RFQ Vendors
model RFQVendor {
  id                String   @id @default(uuid())
  rfqId             String
  vendorId          String
  emailSent         Boolean  @default(false)
  emailSentAt       DateTime?
  responseReceived  Boolean  @default(false)
  
  // Relations
  rfq               RFQ      @relation(fields: [rfqId], references: [id], onDelete: Cascade)
}

// RFQ Line Items
model RFQItem {
  id                String   @id @default(uuid())
  rfqId             String
  itemCode          String
  itemDescription   String
  quantity          Float
  unit              String
  specifications    String?  @db.Text
  
  // Relations
  rfq               RFQ      @relation(fields: [rfqId], references: [id], onDelete: Cascade)
}

// Vendor Quotations
model Quotation {
  id                String   @id @default(uuid())
  companyId         String
  quotationNumber   String
  rfqId             String?
  vendorId          String
  quotationDate     DateTime
  validUntil        DateTime
  currency          String   @default("INR")
  subtotal          Float
  taxAmount         Float
  totalAmount       Float
  paymentTerms      String
  deliveryTerms     String
  status            String   @default("received") // received, under_review, approved, rejected
  emailId           String?  // Reference to email that contained this quotation
  attachmentPath    String?
  notes             String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  company           Company  @relation(fields: [companyId], references: [id])
  vendor            Vendor   @relation(fields: [vendorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  rfq               RFQ?     @relation(fields: [rfqId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  items             QuotationItem[]
  comparison        QuotationComparison[]
  
  @@unique([companyId, quotationNumber])
  @@index([companyId, vendorId])
}

// Quotation Line Items
model QuotationItem {
  id                String   @id @default(uuid())
  quotationId       String
  itemCode          String
  itemDescription   String
  quantity          Float
  unit              String
  unitPrice         Float
  discount          Float    @default(0)
  taxRate           Float
  taxAmount         Float
  totalAmount       Float
  deliveryDays      Int?
  warranty          String?
  
  // Relations
  quotation         Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)
}

// Quotation Comparison
model QuotationComparison {
  id                String   @id @default(uuid())
  rfqId             String
  itemCode          String
  selectedVendorId  String?
  selectionReason   String?
  comparedBy        String
  comparedAt        DateTime
  approved          Boolean  @default(false)
  approvedBy        String?
  approvalDate      DateTime?
  
  // Relations
  quotations        Quotation[]
}

// Purchase Order
model PurchaseOrder {
  id                String   @id @default(uuid())
  companyId         String
  poNumber          String
  vendorId          String
  quotationId       String?
  orderDate         DateTime
  deliveryDate      DateTime
  deliveryAddress   String
  billingAddress    String
  currency          String   @default("INR")
  subtotal          Float
  taxAmount         Float
  totalAmount       Float
  advanceAmount     Float    @default(0)
  paymentTerms      String
  deliveryTerms     String
  status            String   @default("draft") // draft, approved, sent, acknowledged, partial, completed, cancelled
  approvedBy        String?
  approvalDate      DateTime?
  emailSent         Boolean  @default(false)
  emailSentAt       DateTime?
  vendorAcknowledged Boolean @default(false)
  acknowledgedAt    DateTime?
  notes             String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  company           Company  @relation(fields: [companyId], references: [id])
  vendor            Vendor   @relation(fields: [vendorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  items             POItem[]
  grns              GRN[]
  invoices          VendorInvoice[]
  
  @@unique([companyId, poNumber])
  @@index([companyId, vendorId])
  @@index([companyId, status])
}

// PO Line Items
model POItem {
  id                String   @id @default(uuid())
  poId              String
  itemCode          String
  itemDescription   String
  quantity          Float
  unit              String
  unitPrice         Float
  discount          Float    @default(0)
  taxRate           Float
  taxAmount         Float
  totalAmount       Float
  receivedQuantity  Float    @default(0)
  pendingQuantity   Float    // Calculated field
  
  // Relations
  po                PurchaseOrder @relation(fields: [poId], references: [id], onDelete: Cascade)
  grnItems          GRNItem[]
}

// Goods Receipt Note (GRN)
model GRN {
  id                String   @id @default(uuid())
  companyId         String
  grnNumber         String
  poId              String
  receivedDate      DateTime
  receivedBy        String
  vehicleNumber     String?
  driverName        String?
  invoiceNumber     String?
  invoiceDate       DateTime?
  status            String   @default("draft") // draft, verified, approved, rejected
  qualityChecked    Boolean  @default(false)
  qualityRemarks    String?
  storageLocation   String?
  notes             String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  company           Company  @relation(fields: [companyId], references: [id])
  po                PurchaseOrder @relation(fields: [poId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  items             GRNItem[]
  
  @@unique([companyId, grnNumber])
  @@index([companyId, poId])
}

// GRN Line Items
model GRNItem {
  id                String   @id @default(uuid())
  grnId             String
  poItemId          String
  receivedQuantity  Float
  acceptedQuantity  Float
  rejectedQuantity  Float    @default(0)
  rejectionReason   String?
  remarks           String?
  
  // Relations
  grn               GRN      @relation(fields: [grnId], references: [id], onDelete: Cascade)
  poItem            POItem   @relation(fields: [poItemId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

// Vendor Invoice
model VendorInvoice {
  id                String   @id @default(uuid())
  companyId         String
  invoiceNumber     String
  vendorId          String
  poId              String?
  invoiceDate       DateTime
  dueDate           DateTime
  currency          String   @default("INR")
  subtotal          Float
  taxAmount         Float
  totalAmount       Float
  paidAmount        Float    @default(0)
  status            String   @default("received") // received, verified, approved, paid, cancelled
  emailId           String?  // Reference to email that contained this invoice
  attachmentPath    String?
  verifiedBy        String?
  verifiedAt        DateTime?
  approvedBy        String?
  approvedAt        DateTime?
  notes             String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  company           Company  @relation(fields: [companyId], references: [id])
  vendor            Vendor   @relation(fields: [vendorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  po                PurchaseOrder? @relation(fields: [poId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  payments          VendorPayment[]
  
  @@unique([companyId, vendorId, invoiceNumber])
  @@index([companyId, status])
}

// Vendor Payments
model VendorPayment {
  id                String   @id @default(uuid())
  companyId         String
  paymentNumber     String
  vendorId          String
  invoiceId         String
  paymentDate       DateTime
  amount            Float
  paymentMode       String   // bank_transfer, cheque, cash, upi
  referenceNumber   String?
  bankAccount       String?
  status            String   @default("pending") // pending, completed, failed, cancelled
  processedBy       String
  notes             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  invoice           VendorInvoice @relation(fields: [invoiceId], references: [id])
  
  @@unique([companyId, paymentNumber])
  @@index([companyId, vendorId])
}